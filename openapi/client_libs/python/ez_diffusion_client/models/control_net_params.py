# coding: utf-8

"""
    EZ Diffusion API

    Simple API for creating AI-driven generative image and video.  This API provides image generation capabilities using diffusion models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from ez_diffusion_client.models.cn_processor_type import CNProcessorType
from ez_diffusion_client.models.image_input import ImageInput
from typing import Optional, Set
from typing_extensions import Self

class ControlNetParams(BaseModel):
    """
    ControlNetParams
    """ # noqa: E501
    guess_mode: Optional[StrictBool] = Field(default=False, description="generates an image from only the control input (canny edge, depth map, pose, etc.) and without guidance from a prompt.")
    guide_image: ImageInput
    needs_preprocess: Optional[StrictBool] = False
    model: Optional[StrictStr] = Field(default=None, description="ControlNet model identifier")
    controlnet_conditioning_scale: Optional[Union[Annotated[float, Field(le=2.0, strict=True, ge=0.0)], Annotated[int, Field(le=2, strict=True, ge=0)]]] = Field(default=1.0, description="Strength of ControlNet influence")
    control_guidance_end: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=1.0, description="When to stop applying ControlNet guidance (0.0-1.0)")
    control_guidance_start: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=0.0, description="When to start applying ControlNet guidance (0.0-1.0)")
    strength: Optional[Union[Annotated[float, Field(le=1.0, strict=True, ge=0.0)], Annotated[int, Field(le=1, strict=True, ge=0)]]] = Field(default=0.7, description="Overall ControlNet strength")
    processor_type: CNProcessorType
    __properties: ClassVar[List[str]] = ["guess_mode", "guide_image", "needs_preprocess", "model", "controlnet_conditioning_scale", "control_guidance_end", "control_guidance_start", "strength", "processor_type"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ControlNetParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of guide_image
        if self.guide_image:
            _dict['guide_image'] = self.guide_image.to_dict()
        # set to None if model (nullable) is None
        # and model_fields_set contains the field
        if self.model is None and "model" in self.model_fields_set:
            _dict['model'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ControlNetParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "guess_mode": obj.get("guess_mode") if obj.get("guess_mode") is not None else False,
            "guide_image": ImageInput.from_dict(obj["guide_image"]) if obj.get("guide_image") is not None else None,
            "needs_preprocess": obj.get("needs_preprocess") if obj.get("needs_preprocess") is not None else False,
            "model": obj.get("model"),
            "controlnet_conditioning_scale": obj.get("controlnet_conditioning_scale") if obj.get("controlnet_conditioning_scale") is not None else 1.0,
            "control_guidance_end": obj.get("control_guidance_end") if obj.get("control_guidance_end") is not None else 1.0,
            "control_guidance_start": obj.get("control_guidance_start") if obj.get("control_guidance_start") is not None else 0.0,
            "strength": obj.get("strength") if obj.get("strength") is not None else 0.7,
            "processor_type": obj.get("processor_type")
        })
        return _obj


