# coding: utf-8

"""
    EZ Diffusion API

    Simple API for creating AI-driven generative image and video.  This API provides image generation capabilities using diffusion models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from ez_diffusion_client.models.image_input import ImageInput
from typing import Optional, Set
from typing_extensions import Self

class InpaintParams(BaseModel):
    """
    InpaintParams
    """ # noqa: E501
    starting_image: ImageInput
    mask_image: ImageInput
    use_controlnet_union_inpaint: Optional[StrictBool] = Field(default=False, description="Whether to use ControlNet Union inpainting mode")
    __properties: ClassVar[List[str]] = ["starting_image", "mask_image", "use_controlnet_union_inpaint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InpaintParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of starting_image
        if self.starting_image:
            _dict['starting_image'] = self.starting_image.to_dict()
        # override the default output from pydantic by calling `to_dict()` of mask_image
        if self.mask_image:
            _dict['mask_image'] = self.mask_image.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InpaintParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "starting_image": ImageInput.from_dict(obj["starting_image"]) if obj.get("starting_image") is not None else None,
            "mask_image": ImageInput.from_dict(obj["mask_image"]) if obj.get("mask_image") is not None else None,
            "use_controlnet_union_inpaint": obj.get("use_controlnet_union_inpaint") if obj.get("use_controlnet_union_inpaint") is not None else False
        })
        return _obj


