/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { OpResult } from './OpResult';
import {
    OpResultFromJSON,
    OpResultFromJSONTyped,
    OpResultToJSON,
    OpResultToJSONTyped,
} from './OpResult';

/**
 * 
 * @export
 * @interface ImageGenerationResponse
 */
export interface ImageGenerationResponse {
    /**
     * Base64 encoded generated image (production mode)
     * @type {string}
     * @memberof ImageGenerationResponse
     */
    image?: string;
    /**
     * Generation status (local debug mode)
     * @type {string}
     * @memberof ImageGenerationResponse
     */
    status?: string;
    /**
     * Final prompt used for generation (may include LoRA tags)
     * @type {string}
     * @memberof ImageGenerationResponse
     */
    prompt: string;
    /**
     * Seed used for generation
     * @type {number}
     * @memberof ImageGenerationResponse
     */
    seed: number;
    /**
     * Any warnings or non-fatal errors during generation
     * @type {Array<OpResult>}
     * @memberof ImageGenerationResponse
     */
    warnings: Array<OpResult>;
}

/**
 * Check if a given object implements the ImageGenerationResponse interface.
 */
export function instanceOfImageGenerationResponse(value: object): value is ImageGenerationResponse {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    if (!('seed' in value) || value['seed'] === undefined) return false;
    if (!('warnings' in value) || value['warnings'] === undefined) return false;
    return true;
}

export function ImageGenerationResponseFromJSON(json: any): ImageGenerationResponse {
    return ImageGenerationResponseFromJSONTyped(json, false);
}

export function ImageGenerationResponseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageGenerationResponse {
    if (json == null) {
        return json;
    }
    return {
        
        'image': json['image'] == null ? undefined : json['image'],
        'status': json['status'] == null ? undefined : json['status'],
        'prompt': json['prompt'],
        'seed': json['seed'],
        'warnings': ((json['warnings'] as Array<any>).map(OpResultFromJSON)),
    };
}

export function ImageGenerationResponseToJSON(json: any): ImageGenerationResponse {
    return ImageGenerationResponseToJSONTyped(json, false);
}

export function ImageGenerationResponseToJSONTyped(value?: ImageGenerationResponse | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'image': value['image'],
        'status': value['status'],
        'prompt': value['prompt'],
        'seed': value['seed'],
        'warnings': ((value['warnings'] as Array<any>).map(OpResultToJSON)),
    };
}

