/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { CNUnionControlMode } from './CNUnionControlMode';
import {
    CNUnionControlModeFromJSON,
    CNUnionControlModeFromJSONTyped,
    CNUnionControlModeToJSON,
    CNUnionControlModeToJSONTyped,
} from './CNUnionControlMode';
import type { CNProcessorType } from './CNProcessorType';
import {
    CNProcessorTypeFromJSON,
    CNProcessorTypeFromJSONTyped,
    CNProcessorTypeToJSON,
    CNProcessorTypeToJSONTyped,
} from './CNProcessorType';

/**
 * 
 * @export
 * @interface ControlNetParams
 */
export interface ControlNetParams {
    /**
     * Control image as URL or base64 encoded string
     * @type {string}
     * @memberof ControlNetParams
     */
    guideImage: string;
    /**
     * 
     * @type {CNProcessorType}
     * @memberof ControlNetParams
     */
    preprocessWith?: CNProcessorType;
    /**
     * ControlNet model identifier
     * @type {string}
     * @memberof ControlNetParams
     */
    model?: string | null;
    /**
     * Strength of ControlNet influence
     * @type {number}
     * @memberof ControlNetParams
     */
    controlnetConditioningScale?: number;
    /**
     * When to stop applying ControlNet guidance (0.0-1.0)
     * @type {number}
     * @memberof ControlNetParams
     */
    controlGuidanceEnd?: number;
    /**
     * When to start applying ControlNet guidance (0.0-1.0)
     * @type {number}
     * @memberof ControlNetParams
     */
    controlGuidanceStart?: number;
    /**
     * Overall ControlNet strength
     * @type {number}
     * @memberof ControlNetParams
     */
    strength?: number;
    /**
     * 
     * @type {CNUnionControlMode}
     * @memberof ControlNetParams
     */
    unionControlMode: CNUnionControlMode;
}



/**
 * Check if a given object implements the ControlNetParams interface.
 */
export function instanceOfControlNetParams(value: object): value is ControlNetParams {
    if (!('guideImage' in value) || value['guideImage'] === undefined) return false;
    if (!('unionControlMode' in value) || value['unionControlMode'] === undefined) return false;
    return true;
}

export function ControlNetParamsFromJSON(json: any): ControlNetParams {
    return ControlNetParamsFromJSONTyped(json, false);
}

export function ControlNetParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ControlNetParams {
    if (json == null) {
        return json;
    }
    return {
        
        'guideImage': json['guide_image'],
        'preprocessWith': json['preprocess_with'] == null ? undefined : CNProcessorTypeFromJSON(json['preprocess_with']),
        'model': json['model'] == null ? undefined : json['model'],
        'controlnetConditioningScale': json['controlnet_conditioning_scale'] == null ? undefined : json['controlnet_conditioning_scale'],
        'controlGuidanceEnd': json['control_guidance_end'] == null ? undefined : json['control_guidance_end'],
        'controlGuidanceStart': json['control_guidance_start'] == null ? undefined : json['control_guidance_start'],
        'strength': json['strength'] == null ? undefined : json['strength'],
        'unionControlMode': CNUnionControlModeFromJSON(json['union_control_mode']),
    };
}

export function ControlNetParamsToJSON(json: any): ControlNetParams {
    return ControlNetParamsToJSONTyped(json, false);
}

export function ControlNetParamsToJSONTyped(value?: ControlNetParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'guide_image': value['guideImage'],
        'preprocess_with': CNProcessorTypeToJSON(value['preprocessWith']),
        'model': value['model'],
        'controlnet_conditioning_scale': value['controlnetConditioningScale'],
        'control_guidance_end': value['controlGuidanceEnd'],
        'control_guidance_start': value['controlGuidanceStart'],
        'strength': value['strength'],
        'union_control_mode': CNUnionControlModeToJSON(value['unionControlMode']),
    };
}

