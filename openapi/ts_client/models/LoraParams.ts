/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LoraParamsScale } from './LoraParamsScale';
import {
    LoraParamsScaleFromJSON,
    LoraParamsScaleFromJSONTyped,
    LoraParamsScaleToJSON,
    LoraParamsScaleToJSONTyped,
} from './LoraParamsScale';

/**
 * 
 * @export
 * @interface LoraParams
 */
export interface LoraParams {
    /**
     * HuggingFace LoRA model identifier
     * @type {string}
     * @memberof LoraParams
     */
    model: string;
    /**
     * Specific weight file name within the model
     * @type {string}
     * @memberof LoraParams
     */
    weightName: string;
    /**
     * Optional trigger tag to append to prompt
     * @type {string}
     * @memberof LoraParams
     */
    tag?: string | null;
    /**
     * 
     * @type {LoraParamsScale}
     * @memberof LoraParams
     */
    scale?: LoraParamsScale;
}

/**
 * Check if a given object implements the LoraParams interface.
 */
export function instanceOfLoraParams(value: object): value is LoraParams {
    if (!('model' in value) || value['model'] === undefined) return false;
    if (!('weightName' in value) || value['weightName'] === undefined) return false;
    return true;
}

export function LoraParamsFromJSON(json: any): LoraParams {
    return LoraParamsFromJSONTyped(json, false);
}

export function LoraParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): LoraParams {
    if (json == null) {
        return json;
    }
    return {
        
        'model': json['model'],
        'weightName': json['weight_name'],
        'tag': json['tag'] == null ? undefined : json['tag'],
        'scale': json['scale'] == null ? undefined : LoraParamsScaleFromJSON(json['scale']),
    };
}

export function LoraParamsToJSON(json: any): LoraParams {
    return LoraParamsToJSONTyped(json, false);
}

export function LoraParamsToJSONTyped(value?: LoraParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'model': value['model'],
        'weight_name': value['weightName'],
        'tag': value['tag'],
        'scale': LoraParamsScaleToJSON(value['scale']),
    };
}

