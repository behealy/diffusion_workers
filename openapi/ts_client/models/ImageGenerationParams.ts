/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { LoraParams } from './LoraParams';
import {
    LoraParamsFromJSON,
    LoraParamsFromJSONTyped,
    LoraParamsToJSON,
    LoraParamsToJSONTyped,
} from './LoraParams';
import type { InpaintParams } from './InpaintParams';
import {
    InpaintParamsFromJSON,
    InpaintParamsFromJSONTyped,
    InpaintParamsToJSON,
    InpaintParamsToJSONTyped,
} from './InpaintParams';
import type { ControlNetParams } from './ControlNetParams';
import {
    ControlNetParamsFromJSON,
    ControlNetParamsFromJSONTyped,
    ControlNetParamsToJSON,
    ControlNetParamsToJSONTyped,
} from './ControlNetParams';
import type { ImageToImageParams } from './ImageToImageParams';
import {
    ImageToImageParamsFromJSON,
    ImageToImageParamsFromJSONTyped,
    ImageToImageParamsToJSON,
    ImageToImageParamsToJSONTyped,
} from './ImageToImageParams';

/**
 * 
 * @export
 * @interface ImageGenerationParams
 */
export interface ImageGenerationParams {
    /**
     * Text prompt describing the desired image
     * @type {string}
     * @memberof ImageGenerationParams
     */
    prompt: string;
    /**
     * Base64 encoded starting image for image-to-image or inpainting
     * @type {string}
     * @memberof ImageGenerationParams
     */
    startingImage?: string | null;
    /**
     * Negative prompt to avoid unwanted elements
     * @type {string}
     * @memberof ImageGenerationParams
     */
    negativePrompt?: string | null;
    /**
     * HuggingFace model identifier to use for generation
     * @type {string}
     * @memberof ImageGenerationParams
     */
    baseModel?: string | null;
    /**
     * How closely to follow the prompt (higher = more faithful)
     * @type {number}
     * @memberof ImageGenerationParams
     */
    guidanceScale?: number | null;
    /**
     * Number of denoising steps (higher = more detailed but slower)
     * @type {number}
     * @memberof ImageGenerationParams
     */
    inferenceSteps?: number | null;
    /**
     * Random seed for reproducible generation
     * @type {number}
     * @memberof ImageGenerationParams
     */
    seed?: number | null;
    /**
     * Output image dimensions [height, width]
     * @type {Array<number>}
     * @memberof ImageGenerationParams
     */
    dimensions?: Array<number>;
    /**
     * 
     * @type {InpaintParams}
     * @memberof ImageGenerationParams
     */
    inpaint?: InpaintParams;
    /**
     * 
     * @type {ImageToImageParams}
     * @memberof ImageGenerationParams
     */
    imageToImage?: ImageToImageParams;
    /**
     * List of ControlNet configurations
     * @type {Array<ControlNetParams>}
     * @memberof ImageGenerationParams
     */
    controlnets?: Array<ControlNetParams> | null;
    /**
     * List of LoRA adapter configurations
     * @type {Array<LoraParams>}
     * @memberof ImageGenerationParams
     */
    loras?: Array<LoraParams> | null;
}

/**
 * Check if a given object implements the ImageGenerationParams interface.
 */
export function instanceOfImageGenerationParams(value: object): value is ImageGenerationParams {
    if (!('prompt' in value) || value['prompt'] === undefined) return false;
    return true;
}

export function ImageGenerationParamsFromJSON(json: any): ImageGenerationParams {
    return ImageGenerationParamsFromJSONTyped(json, false);
}

export function ImageGenerationParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageGenerationParams {
    if (json == null) {
        return json;
    }
    return {
        
        'prompt': json['prompt'],
        'startingImage': json['starting_image'] == null ? undefined : json['starting_image'],
        'negativePrompt': json['negative_prompt'] == null ? undefined : json['negative_prompt'],
        'baseModel': json['base_model'] == null ? undefined : json['base_model'],
        'guidanceScale': json['guidance_scale'] == null ? undefined : json['guidance_scale'],
        'inferenceSteps': json['inference_steps'] == null ? undefined : json['inference_steps'],
        'seed': json['seed'] == null ? undefined : json['seed'],
        'dimensions': json['dimensions'] == null ? undefined : json['dimensions'],
        'inpaint': json['inpaint'] == null ? undefined : InpaintParamsFromJSON(json['inpaint']),
        'imageToImage': json['image_to_image'] == null ? undefined : ImageToImageParamsFromJSON(json['image_to_image']),
        'controlnets': json['controlnets'] == null ? undefined : ((json['controlnets'] as Array<any>).map(ControlNetParamsFromJSON)),
        'loras': json['loras'] == null ? undefined : ((json['loras'] as Array<any>).map(LoraParamsFromJSON)),
    };
}

export function ImageGenerationParamsToJSON(json: any): ImageGenerationParams {
    return ImageGenerationParamsToJSONTyped(json, false);
}

export function ImageGenerationParamsToJSONTyped(value?: ImageGenerationParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'prompt': value['prompt'],
        'starting_image': value['startingImage'],
        'negative_prompt': value['negativePrompt'],
        'base_model': value['baseModel'],
        'guidance_scale': value['guidanceScale'],
        'inference_steps': value['inferenceSteps'],
        'seed': value['seed'],
        'dimensions': value['dimensions'],
        'inpaint': InpaintParamsToJSON(value['inpaint']),
        'image_to_image': ImageToImageParamsToJSON(value['imageToImage']),
        'controlnets': value['controlnets'] == null ? undefined : ((value['controlnets'] as Array<any>).map(ControlNetParamsToJSON)),
        'loras': value['loras'] == null ? undefined : ((value['loras'] as Array<any>).map(LoraParamsToJSON)),
    };
}

