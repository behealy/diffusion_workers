/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface InpaintParams
 */
export interface InpaintParams {
    /**
     * Base64 encoded source image for inpainting
     * @type {string}
     * @memberof InpaintParams
     */
    startingImage: string;
    /**
     * Base64 encoded mask image (black = keep, white = inpaint)
     * @type {string}
     * @memberof InpaintParams
     */
    maskImage: string;
    /**
     * Whether to use ControlNet Union inpainting mode
     * @type {boolean}
     * @memberof InpaintParams
     */
    useControlnetUnionInpaint?: boolean;
}

/**
 * Check if a given object implements the InpaintParams interface.
 */
export function instanceOfInpaintParams(value: object): value is InpaintParams {
    if (!('startingImage' in value) || value['startingImage'] === undefined) return false;
    if (!('maskImage' in value) || value['maskImage'] === undefined) return false;
    return true;
}

export function InpaintParamsFromJSON(json: any): InpaintParams {
    return InpaintParamsFromJSONTyped(json, false);
}

export function InpaintParamsFromJSONTyped(json: any, ignoreDiscriminator: boolean): InpaintParams {
    if (json == null) {
        return json;
    }
    return {
        
        'startingImage': json['starting_image'],
        'maskImage': json['mask_image'],
        'useControlnetUnionInpaint': json['use_controlnet_union_inpaint'] == null ? undefined : json['use_controlnet_union_inpaint'],
    };
}

export function InpaintParamsToJSON(json: any): InpaintParams {
    return InpaintParamsToJSONTyped(json, false);
}

export function InpaintParamsToJSONTyped(value?: InpaintParams | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'starting_image': value['startingImage'],
        'mask_image': value['maskImage'],
        'use_controlnet_union_inpaint': value['useControlnetUnionInpaint'],
    };
}

