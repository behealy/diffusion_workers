/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ValidationErrorDetailInner } from './ValidationErrorDetailInner';
import {
    ValidationErrorDetailInnerFromJSON,
    ValidationErrorDetailInnerFromJSONTyped,
    ValidationErrorDetailInnerToJSON,
    ValidationErrorDetailInnerToJSONTyped,
} from './ValidationErrorDetailInner';

/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorDetailInner>}
     * @memberof ValidationError
     */
    detail?: Array<ValidationErrorDetailInner>;
}

/**
 * Check if a given object implements the ValidationError interface.
 */
export function instanceOfValidationError(value: object): value is ValidationError {
    return true;
}

export function ValidationErrorFromJSON(json: any): ValidationError {
    return ValidationErrorFromJSONTyped(json, false);
}

export function ValidationErrorFromJSONTyped(json: any, ignoreDiscriminator: boolean): ValidationError {
    if (json == null) {
        return json;
    }
    return {
        
        'detail': json['detail'] == null ? undefined : ((json['detail'] as Array<any>).map(ValidationErrorDetailInnerFromJSON)),
    };
}

export function ValidationErrorToJSON(json: any): ValidationError {
    return ValidationErrorToJSONTyped(json, false);
}

export function ValidationErrorToJSONTyped(value?: ValidationError | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'detail': value['detail'] == null ? undefined : ((value['detail'] as Array<any>).map(ValidationErrorDetailInnerToJSON)),
    };
}

