/* tslint:disable */
/* eslint-disable */
/**
 * SDXL Worker API
 * SDXL Image Generation API for RunPod serverless workers.  This API provides image generation capabilities using Stable Diffusion XL (SDXL) models with support for: - Text-to-Image generation - Image-to-Image generation   - Inpainting - ControlNet Union with 8 control modes - LoRA adapters for fine-tuned models - Multiple schedulers and configurations  The service runs on GPU-enabled infrastructure and returns high-quality generated images based on text prompts and optional control inputs. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


/**
 * ControlNet preprocessing method
 * @export
 */
export const CNProcessorType = {
    Canny: 'canny',
    DepthLeres: 'depth_leres',
    DepthLeres2: 'depth_leres++',
    DepthMidas: 'depth_midas',
    DepthZoe: 'depth_zoe',
    LineartAnime: 'lineart_anime',
    LineartCoarse: 'lineart_coarse',
    LineartRealistic: 'lineart_realistic',
    MediapipeFace: 'mediapipe_face',
    Mlsd: 'mlsd',
    NormalBae: 'normal_bae',
    Openpose: 'openpose',
    OpenposeFace: 'openpose_face',
    OpenposeFaceonly: 'openpose_faceonly',
    OpenposeFull: 'openpose_full',
    OpenposeHand: 'openpose_hand',
    ScribbleHed: 'scribble_hed',
    ScribblePidinet: 'scribble_pidinet',
    Shuffle: 'shuffle',
    SoftedgeHed: 'softedge_hed',
    SoftedgeHedsafe: 'softedge_hedsafe',
    SoftedgePidinet: 'softedge_pidinet',
    SoftedgePidsafe: 'softedge_pidsafe',
    Dwpose: 'dwpose',
    OpenposeHandBody: 'openpose_hand_body'
} as const;
export type CNProcessorType = typeof CNProcessorType[keyof typeof CNProcessorType];


export function instanceOfCNProcessorType(value: any): boolean {
    for (const key in CNProcessorType) {
        if (Object.prototype.hasOwnProperty.call(CNProcessorType, key)) {
            if (CNProcessorType[key as keyof typeof CNProcessorType] === value) {
                return true;
            }
        }
    }
    return false;
}

export function CNProcessorTypeFromJSON(json: any): CNProcessorType {
    return CNProcessorTypeFromJSONTyped(json, false);
}

export function CNProcessorTypeFromJSONTyped(json: any, ignoreDiscriminator: boolean): CNProcessorType {
    return json as CNProcessorType;
}

export function CNProcessorTypeToJSON(value?: CNProcessorType | null): any {
    return value as any;
}

export function CNProcessorTypeToJSONTyped(value: any, ignoreDiscriminator: boolean): CNProcessorType {
    return value as CNProcessorType;
}

